
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of a resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can only read/write their own profile
    match /users/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated(); // Anyone authenticated can create their own user doc on signup
    }

    // Providers can only write to their own profile. Anyone can read.
    match /providerProfiles/{providerId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && isOwner(providerId);
    }

    // Jobs can be read by anyone. Only clients can create them.
    // Only the client who created the job can update it.
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource.data.clientId);
    }

    // Quotes can be read by the client and the provider. Only the provider can create.
    match /quotes/{quoteId} {
        allow read: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
        allow create: if isAuthenticated() && isOwner(request.resource.data.providerId);
        allow update: if isAuthenticated() && isOwner(resource.data.clientId); // Client updates status (accept/reject)
    }
    
    // Reviews can be read by anyone. Only the client who posted the job can create/update.
    match /reviews/{reviewId} {
        allow read: if true;
        allow create, update: if isAuthenticated() && isOwner(request.resource.data.clientId);
    }

    // Notifications are private to the user.
    match /notifications/{notificationId} {
      allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated(); // Server-side logic creates these
    }

    // Chat participants can read/write to their chat.
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantUids;
      
      // Messages can be read by participants, only created by sender.
      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
        allow create: if isAuthenticated() && isOwner(request.resource.data.senderUid);
      }
    }
    
    // Bookings can be read/updated by participants. Only created by client.
    match /bookingRequests/{bookingId} {
        allow read: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
        allow create: if isAuthenticated() && isOwner(request.resource.data.clientId);
        allow update: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
    }
    
    // Mail collection for Trigger Email extension should only be writeable.
    match /mail/{docId} {
       allow read: if false;
       allow write: if isAuthenticated();
    }
  }
}
    