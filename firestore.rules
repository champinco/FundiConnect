
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null; // Allow authenticated users to read basic user profiles (e.g. for display names)
      allow write: if request.auth != null && request.auth.uid == userId; // Only user can write to their own profile
    }

    // Provider Profiles collection
    match /providerProfiles/{providerId} {
      allow read: if request.auth != null; // Allow authenticated users to read provider profiles
      allow write: if request.auth != null && request.auth.uid == providerId; // Only provider can write to their own profile
    }

    // Jobs collection
    match /jobs/{jobId} {
      // Allow authenticated users (clients, providers) to read open or pending jobs
      allow read: if request.auth != null && (resource.data.status == 'open' || resource.data.status == 'pending_quotes');
      
      // Allow clients to read all their own jobs, regardless of status
      allow read: if request.auth != null && request.auth.uid == resource.data.clientId;
      
      // Allow assigned providers to read the job they are assigned to, regardless of status
      allow read: if request.auth != null && request.auth.uid == resource.data.assignedProviderId;

      // Allow authenticated users to create jobs, client ID must match creator's UID
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      
      // Allow clients to update their own jobs if not yet assigned
      // Allow clients or assigned providers to update jobs that are assigned or in progress
      allow update: if request.auth != null && (
        (request.auth.uid == resource.data.clientId && (resource.data.status == 'open' || resource.data.status == 'pending_quotes')) ||
        (request.auth.uid == resource.data.clientId && (resource.data.status == 'assigned' || resource.data.status == 'in_progress' || resource.data.status == 'completed')) ||
        (request.auth.uid == resource.data.assignedProviderId && (resource.data.status == 'assigned' || resource.data.status == 'in_progress'))
      );
      // Add delete rules if necessary, e.g., client can delete their own open job.
      // allow delete: if request.auth != null && request.auth.uid == resource.data.clientId && resource.data.status == 'open';
    }

    // Quotes collection
    match /quotes/{quoteId} {
      // Client can read quotes for their jobs
      allow read: if request.auth != null && request.auth.uid == resource.data.clientId;
      // Provider can read quotes they submitted
      allow read: if request.auth != null && request.auth.uid == resource.data.providerId;
      
      // Providers can create quotes for jobs
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      
      // Client can update quote status (accept/reject)
      // Provider can update quote status (withdraw - if implemented)
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Reviews are public
      // Clients can create reviews for jobs they posted, if they are the client for that review
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      // Client can update their own review
      allow update: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Chats collection
    match /chats/{chatId} {
      // Participants can read/write the chat document itself (e.g., lastMessage, updatedAt)
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participantUids;
      
      // Messages subcollection within a chat
      match /messages/{messageId} {
        // Participants can read messages in their chat
        allow read: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]);
        // Senders can create messages
        allow create: if request.auth != null && request.auth.uid == request.resource.data.senderUid && get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]);
        // Add update/delete rules for messages if needed (e.g., sender can edit/delete their own recent message)
      }
    }
  }
}
