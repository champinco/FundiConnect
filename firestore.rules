
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null; // Allow reading basic user info if needed by other profiles
      allow write: if request.auth != null && request.auth.uid == userId; // User can write to their own profile
    }

    // ProviderProfiles collection
    match /providerProfiles/{providerId} {
      allow read: if request.auth != null; // All authenticated users can view provider profiles
      allow write: if request.auth != null && request.auth.uid == providerId; // Provider can write to their own profile
    }

    // Jobs collection
    match /jobs/{jobId} {
      // Allow authenticated users to read open or pending_quotes jobs (for browsing)
      // Also allow client or assigned provider to read their specific job
      allow read: if request.auth != null && 
                    (
                      (resource.data.status == 'open' || resource.data.status == 'pending_quotes') ||
                      request.auth.uid == resource.data.clientId ||
                      (resource.data.assignedProviderId != null && request.auth.uid == resource.data.assignedProviderId)
                    );
      
      // Allow job creators to create jobs (clientId must match auth.uid)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      
      // Allow client to update their job (e.g., status, description)
      // Allow assigned provider to update status (e.g., to 'in_progress', 'completed' - this needs specific field checks in app logic)
      allow update: if request.auth != null && 
                      (
                        request.auth.uid == resource.data.clientId ||
                        (resource.data.assignedProviderId != null && request.auth.uid == resource.data.assignedProviderId)
                      );
      // Allow client to delete their job (consider implications, maybe only if 'open')
      allow delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Quotes collection
    match /quotes/{quoteId} {
      // Client can read quotes for their job, provider can read their own quote
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
      
      // Only provider can create a quote for a job
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      
      // Client can update quote status (accept/reject)
      // Provider could update (e.g. withdraw, if implemented)
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId); 
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if request.auth != null; // All authenticated users can read reviews
      
      // Only client who posted the job can create a review for that job's provider
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      
      // Optionally allow client to update/delete their review
      // allow update, delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }
    
    // Chats & Messages
    match /chats/{chatId} {
      // Only participants of the chat can read/write
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participantUids;
      
      match /messages/{messageId} {
        // Only participants of the parent chat can read/write messages
        allow read, write: if request.auth != null && 
                             request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
  }
}
