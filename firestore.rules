
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
    }

    // USER PROFILES:
    // Read: Anyone can read user and provider profiles (needed for public pages).
    // Create: A user can create their own profile document.
    // Update: A user can only update their own profile document.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Disallow deleting user profiles for now
    }

    match /providerProfiles/{providerId} {
      allow read: if true;
      allow create: if isOwner(providerId);
      allow update: if isOwner(providerId);
      allow delete: if false; // Disallow deleting provider profiles for now
    }
    
    // JOBS:
    // Read: Anyone can read job details.
    // Create: Signed-in users can create jobs.
    // Update/Delete: Only the client who posted the job can update or delete it.
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.clientId == request.auth.uid;
    }

    // QUOTES:
    // Read: Only the client who posted the job or the provider who submitted the quote can read it.
    // Create: A signed-in provider can submit a quote.
    // Update: Client can update status (accept/reject), provider can update status (withdraw).
    match /quotes/{quoteId} {
      allow read: if isSignedIn() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
      allow create: if isSignedIn() && request.resource.data.providerId == request.auth.uid;
      allow update: if isSignedIn() && (
                      (isOwner(resource.data.clientId) && request.resource.data.status != resource.data.status) ||
                      (isOwner(resource.data.providerId) && request.resource.data.status == 'withdrawn')
                    );
      allow delete: if false;
    }
    
    // REVIEWS:
    // Read: Anyone can read reviews.
    // Create: Only the client associated with the job can create a review.
    // Update/Delete: A user can only update/delete their own review.
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn() && isOwner(request.resource.data.clientId);
        allow update, delete: if isSignedIn() && isOwner(resource.data.clientId);
    }
    
    // BOOKINGS:
    // Read: Only participants (client or provider) can read the booking.
    // Create: A signed-in user can create a booking request.
    // Update: Participants can update the booking (e.g., status changes).
    match /bookingRequests/{bookingId} {
      allow read, update: if isSignedIn() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
      allow create: if isSignedIn() && isOwner(request.resource.data.clientId);
      allow delete: if isOwner(resource.data.clientId); // Client can delete their request
    }

    // NOTIFICATIONS:
    // Read/Update: Only the user receiving the notification can access it.
    match /notifications/{notificationId} {
        allow read, update, delete: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if false; // Only backend can create notifications.
    }

    // CHATS & MESSAGES:
    // Read/Write: Only participants in the chat can access it and its messages.
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && isParticipant(chatId);
      allow create: if isSignedIn(); // Allow creating if you're one of the participants
      
      match /messages/{messageId} {
        allow read: if isSignedIn() && isParticipant(chatId);
        allow create: if isSignedIn() && request.resource.data.senderUid == request.auth.uid;
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // MAIL COLLECTION (FOR TRIGGER EMAIL EXTENSION):
    // SECURITY: No client-side access should be allowed. All emails are created by the backend (server actions/functions).
    match /mail/{mailId} {
        allow read, write: if false;
    }
  }
}
