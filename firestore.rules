
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for 'jobs' collection
    match /jobs/{jobId} {
      // Allow authenticated users (providers) to read 'open' or 'pending_quotes' jobs
      allow read: if request.auth != null && (resource.data.status == 'open' || resource.data.status == 'pending_quotes');
      
      // Allow job creators (clients) to write (create, update, delete) their own jobs
      allow write: if request.auth != null && request.auth.uid == resource.data.clientId;
      
      // Allow job creators (clients) to read their own jobs, regardless of status
      // This rule is additive to the general read rule above.
      // If a job is 'completed' and belongs to the client, this rule allows them to read it.
      // If it's 'open' and belongs to client, both rules might grant access.
      allow read: if request.auth != null && request.auth.uid == resource.data.clientId;
      
      // Allow authenticated users to create jobs (covered by specific write above for client,
      // but good to have a general create for logged-in users if UI allows broader creation in future)
      allow create: if request.auth != null;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      // Users can create their own profile (on signup)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for 'providerProfiles' collection
    match /providerProfiles/{providerId} {
      // Anyone can read provider profiles (public profiles)
      allow read: if true;
      // Providers can update their own profile
      allow update: if request.auth != null && request.auth.uid == providerId;
      // Providers can create their own profile (on signup if accountType is provider)
      allow create: if request.auth != null && request.auth.uid == providerId;
    }

    // Rules for 'quotes' collection
    match /quotes/{quoteId} {
      // Client can read quotes for their jobs
      // Provider can read quotes they submitted
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
      
      // Providers can create quotes for jobs
      allow create: if request.auth != null; // Further refinement: check if job is open, if user is provider
      
      // Client can update status (accept/reject)
      allow update: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Rules for 'reviews' collection
    match /reviews/{reviewId} {
      // Anyone can read reviews (they are public on provider profiles)
      allow read: if true;
      // Clients can create reviews for jobs they posted and are completed, for the assigned provider
      allow create: if request.auth != null && request.auth.uid == resource.data.clientId;
    }
    
    // Rules for 'chats' collection
    match /chats/{chatId} {
      // Participants can read/write to their own chat documents
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participantUids;
      allow create: if request.auth != null; 
    }

    // Rules for 'messages' subcollection within 'chats'
    match /chats/{chatId}/messages/{messageId} {
      // Participants of the parent chat can read/write messages
      allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      // Senders can create messages
      allow create: if request.auth != null && request.resource.data.senderUid == request.auth.uid
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
    }

    // Default deny all other paths for collections not explicitly defined
    // This is a good security practice, but be mindful if you add new top-level collections.
    match /{path=**}/documents/{document} {
        allow read, write: if false;
    }
  }
}

    