
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection: Allow users to read and write their own profile.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Consider if admins need access:
      // allow read, write: if request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists;
    }

    // ProviderProfiles collection:
    match /providerProfiles/{providerId} {
      // Allow anyone to read provider profiles (public listings)
      allow read: if true; 
      // Allow providers to create and update their own profiles
      allow create, update: if request.auth != null && request.auth.uid == providerId;
      // Delete might be restricted or handled by admins
      allow delete: if false; // Or specific admin role check
    }

    // Jobs collection
    match /jobs/{jobId} {
      // Allow authenticated users (clients and providers) to read open/pending_quotes jobs for browsing
      allow read: if request.auth != null && (resource.data.status == 'open' || resource.data.status == 'pending_quotes');
      
      // Allow clients to read their own jobs regardless of status, and to update/delete them if they are still 'open' or 'pending_quotes'
      allow read: if request.auth != null && request.auth.uid == resource.data.clientId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.clientId && (resource.data.status == 'open' || resource.data.status == 'pending_quotes');

      // Allow assigned providers to read their assigned jobs
      allow read: if request.auth != null && request.auth.uid == resource.data.assignedProviderId;
      
      // Allow authenticated users (clients) to create jobs
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;

      // For other updates (e.g., status changes by system or specific roles), more specific rules might be needed.
      // Example: allow providers to update status to 'in_progress' if assigned.
      // allow update: if request.auth != null && request.auth.uid == resource.data.assignedProviderId && request.resource.data.status == 'in_progress';
    }

    // Quotes collection
    match /quotes/{quoteId} {
      // Allow client who posted the job to read quotes for their job
      allow read: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.clientId;
      // Allow provider who submitted the quote to read their own quote
      allow read: if request.auth != null && request.auth.uid == resource.data.providerId;
      
      // Allow providers to create quotes for open jobs
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId &&
                       get(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)).data.status == 'open';
      
      // Allow clients to update quote status (e.g., accept/reject) for their jobs
      allow update: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.clientId &&
                       (request.resource.data.status == 'accepted' || request.resource.data.status == 'rejected');
      // Providers might be allowed to withdraw pending quotes
      allow update: if request.auth != null && request.auth.uid == resource.data.providerId &&
                       resource.data.status == 'pending' && request.resource.data.status == 'withdrawn';
    }

    // Reviews collection
    match /reviews/{reviewId} {
      // Allow anyone to read reviews (public)
      allow read: if true;
      // Allow clients to create reviews for jobs they posted and that are completed,
      // and only if they haven't reviewed it before.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId &&
                       get(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)).data.status == 'completed' &&
                       get(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)).data.clientId == request.auth.uid &&
                       !exists(/databases/$(database)/documents/reviews/{reviewId}); // Simplistic check, real check in backend
      // Allow users to update/delete their own reviews (if needed)
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Chats collection
    match /chats/{chatId} {
      // Allow participants of the chat to read and write
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participantUids;
      
      match /messages/{messageId} {
        // Allow participants of the chat to read messages
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
        // Allow participants to create messages in their chat
        allow create: if request.auth != null && request.auth.uid == request.resource.data.senderUid &&
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
  }
}
